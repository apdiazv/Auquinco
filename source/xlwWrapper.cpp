//// 
//// Autogenerated by xlw 
//// Do not edit this file, it will be overwritten 
//// by InterfaceGenerator 
////

#include "xlw/MyContainers.h"
#include <xlw/CellMatrix.h>
#include "cppinterface.h"
#include <xlw/xlw.h>
#include <xlw/XlFunctionRegistration.h>
#include <stdexcept>
#include <xlw/XlOpenClose.h>
#include <xlw/HiResTimer.h>
using namespace xlw;

namespace {
const char* LibraryName = "MyComplementosLibrary";
};


// registrations start here


namespace
{
XLRegistration::Arg
EchoShortArgs[]=
{
{ "x"," number to be echoed ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerEchoShort("xlEchoShort",
"EchoShort",
" echoes a short ",
LibraryName,
EchoShortArgs,
1
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlEchoShort(
LPXLFOPER xa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper xb(
	(xa));
short x(
	xb.AsShort("x"));

short result(
	EchoShort(
		x)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
EchoIntArgs[]=
{
{ "x"," number to be echoed ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerEchoInt("xlEchoInt",
"EchoInt",
" echoes a int ",
LibraryName,
EchoIntArgs,
1
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlEchoInt(
double xa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

int x(
	static_cast<int>(xa));

int result(
	EchoInt(
		x)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
EchoUnsLongArgs[]=
{
{ "x"," number to be echoed ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerEchoUnsLong("xlEchoUnsLong",
"EchoUnsLong",
" echoes a unsigned long ",
LibraryName,
EchoUnsLongArgs,
1
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlEchoUnsLong(
double xa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

unsigned long x(
	static_cast<unsigned long>(xa));

unsigned long result(
	EchoUnsLong(
		x)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
EchoStringIntArgs[]=
{
{ "data"," data to be echoed ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerEchoStringInt("xlEchoStringInt",
"EchoStringInt",
" echoes a string ",
LibraryName,
EchoStringIntArgs,
1
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlEchoStringInt(
LPXLFOPER dataa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper datab(
	(dataa));
std::wstring data(
	datab.AsWstring("data"));

int result(
	EchoStringInt(
		data)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
QCBussDayArgs[]=
{
{ "date"," Fecha inical ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerQCBussDay("xlQCBussDay",
"QCBussDay",
" Ajusta a habil siguiente. Si se cambia mes entonces ajusta al habil anterior. (si la fecha ingresada es habil entonces devuelve tal fecha) ",
LibraryName,
QCBussDayArgs,
1
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlQCBussDay(
double datea)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

int date(
	static_cast<int>(datea));

int result(
	QCBussDay(
		date)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
QCPrevDayArgs[]=
{
{ "date"," Fecha inicial ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerQCPrevDay("xlQCPrevDay",
"QCPrevDay",
"Si la fecha ingresada no es habil, la ajusta a habil anterior ",
LibraryName,
QCPrevDayArgs,
1
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlQCPrevDay(
double datea)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

int date(
	static_cast<int>(datea));

int result(
	QCPrevDay(
		date)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
QCShiftArgs[]=
{
{ "date"," Fecha inicial ","B"},
{ "nStep"," Numero de dias habiles ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerQCShift("xlQCShift",
"QCShift",
" Agrega n dias habiles a una fecha dada. La opcion 0 agrega un dia habil si fecha ingresada es inhabil. ",
LibraryName,
QCShiftArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlQCShift(
double datea,
double nStepa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

int date(
	static_cast<int>(datea));

int nStep(
	static_cast<int>(nStepa));

int result(
	QCShift(
		date,
		nStep)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
QCLagArgs[]=
{
{ "date"," Fecha ","B"},
{ "nStep"," Numero de dias habiles ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerQCLag("xlQCLag",
"QCLag",
" Quita n dias habiles a una fecha dada. La opcion 0 quita un dia habil si fecha ingresada es inhabil ",
LibraryName,
QCLagArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlQCLag(
double datea,
double nStepa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

int date(
	static_cast<int>(datea));

int nStep(
	static_cast<int>(nStepa));

int result(
	QCLag(
		date,
		nStep)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
QCYearFractionArgs[]=
{
{ "startDate"," Fecha inicio ","B"},
{ "endDate"," Fecha fin ","B"},
{ "basis"," base: Act/365, act/360 o 30/360 (por defecto act/365) ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerQCYearFraction("xlQCYearFraction",
"QCYearFraction",
" Calcula tiempo en a os entre dos fechas utilizando base especificada ",
LibraryName,
QCYearFractionArgs,
3
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlQCYearFraction(
double startDatea,
double endDatea,
LPXLFOPER basisa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

int startDate(
	static_cast<int>(startDatea));

int endDate(
	static_cast<int>(endDatea));

XlfOper basisb(
	(basisa));
std::string basis(
	basisb.AsString("basis"));

double result(
	QCYearFraction(
		startDate,
		endDate,
		basis)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
QCYearFracActualActualArgs[]=
{
{ "startDate"," Fecha inicio ","B"},
{ "endDate"," Fecha fin ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerQCYearFracActualActual("xlQCYearFracActualActual",
"QCYearFracActualActual",
" Calcula tiempo en a os entre dos fechas utilizando base act/act ",
LibraryName,
QCYearFracActualActualArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlQCYearFracActualActual(
double startDatea,
double endDatea)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

int startDate(
	static_cast<int>(startDatea));

int endDate(
	static_cast<int>(endDatea));

int result(
	QCYearFracActualActual(
		startDate,
		endDate)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
QCRedondeoParcialArgs[]=
{
{ "number"," numero ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerQCRedondeoParcial("xlQCRedondeoParcial",
"QCRedondeoParcial",
" Si parte decimal de n es menor que 0.25 devuelve n, si es mayor o igual a 0.25 y menor que 0.75 devuelve (n + 0.5) y si es mayor que 0.75 devuelve (n+1) ",
LibraryName,
QCRedondeoParcialArgs,
1
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlQCRedondeoParcial(
double number)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);


double result(
	QCRedondeoParcial(
		number)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
QCAddMonthsArgs[]=
{
{ "startDate"," Fecha inicial ","B"},
{ "months"," Numero de meses a agregar o quitar ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerQCAddMonths("xlQCAddMonths",
"QCAddMonths",
" Agrega o quita meses a una fecha dada ",
LibraryName,
QCAddMonthsArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlQCAddMonths(
double startDatea,
double monthsa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

int startDate(
	static_cast<int>(startDatea));

int months(
	static_cast<int>(monthsa));

int result(
	QCAddMonths(
		startDate,
		months)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
QCAddMonthsCArgs[]=
{
{ "startDate"," Fecha inicial ","B"},
{ "months"," Numero de meses a agregar o quitar ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerQCAddMonthsC("xlQCAddMonthsC",
"QCAddMonthsC",
" Agrega o quita meses a una fecha dada. Fecha final es dia 9 del mes ",
LibraryName,
QCAddMonthsCArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlQCAddMonthsC(
double startDatea,
double monthsa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

int startDate(
	static_cast<int>(startDatea));

int months(
	static_cast<int>(monthsa));

int result(
	QCAddMonthsC(
		startDate,
		months)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

//////////////////////////
// Methods that will get registered to execute in AutoOpen
//////////////////////////

//////////////////////////
// Methods that will get registered to execute in AutoClose
//////////////////////////

